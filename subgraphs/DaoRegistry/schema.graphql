enum VotingAdapterName {
  OffchainVotingContract
  VotingContract
}

enum VotingState {
  NOT_STARTED
  TIE
  PASS
  NOT_PASS
  IN_PROGRESS
  GRACE_PERIOD
}

type Member @entity {
  "Unique identifier and primary key of the `Member` entity"
  id: ID! # Set to `${member.id}`
  memberAddress: Bytes
  createdAt: String
  delegateKey: Bytes
  units: BigInt!
  # tokenHoldings: [TokenHolder!] @derivedFrom(field: "member")
  proposals: [Proposal!] @derivedFrom(field: "member")
  didFullyRagequit: Boolean
  isDelegated: Boolean
}

type Proposal @entity {
  "Unique identifier and primary key of the `Proposal` entity"
  id: ID! # Set to `${tribute.id}-proposal-${proposal.id}`
  proposalId: Bytes!
  flags: BigInt!
  submittedBy: Bytes
  sponsored: Boolean
  sponsoredAt: String
  sponsoredBy: Bytes
  processed: Boolean
  processedAt: String
  processedBy: Bytes
  member: Member

  "Adapter ID of the proposal"
  adapterId: Bytes
  "Adapter contract address of the proposal"
  adapterAddress: Bytes
  "Voting adapter address"
  votingAdapter: Bytes

  # ONBOARDING; proposal details
  unitsToMint: Bytes
  amount: BigInt
  unitsRequested: BigInt
  token: Bytes
  applicant: Bytes

  # OFFCHAIN VOTES: additional info
  snapshot: BigInt
  proposalHash: Bytes
  reporter: Bytes
  resultRoot: Bytes
  nbNo: BigInt
  nbYes: BigInt
  index: BigInt
  startingTime: BigInt
  gracePeriodStartingTime: BigInt
  isChallenged: Boolean
  stepRequested: BigInt
  # fallbackVotes: BigInt
  forceFailed: Boolean
  fallbackVotesCount: BigInt

  # ONCHAIN VOTES: additional info
  votes: BigInt

  votingState: String
  votingResult: Vote
}

type Vote @entity {
  "Unique identifier and primary key of the `Vote` entity"
  id: ID! # Set to `${tribute.id}-vote-${proposal.id}`
  nbNo: BigInt
  nbYes: BigInt
  adapterName: VotingAdapterName!
  adapterAddress: Bytes!
  proposal: Proposal
}
