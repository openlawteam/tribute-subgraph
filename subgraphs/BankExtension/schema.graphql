type TributeDao @entity {
  "Unique identifier and primary key of the `TributeDao` entity"
  id: ID! # Set to `${tribute.id}
  "The address of the DAO"
  daoAddress: Bytes
  "The name of the DAO"
  daoName: String
  "The DAO creator address"
  creator: Bytes
  createdAt: String
}

# type Member @entity {
#   "Unique identifier and primary key of the `Member` entity"
#   id: ID! # Set to `${member.id}`
#   # memberAddress: Bytes
#   # createdAt: String
#   # delegateKey: Bytes
#   # didFullyRagequit: Boolean
#   # isDelegated: Boolean
#   # tokenHoldings: [TokenHolder!] @derivedFrom(field: "member")
#   # units: BigInt!
# }

type Bank @entity {
  "Unique identifier and primary key of the `Bank` entity"
  id: ID! # Set to `${tribute.id}-bank-${bank.id}`
  "The bank of the DAO"
  bankAddress: Bytes!
  totalUnits: String
  totalUnitsIssued: String
}

type Token @entity {
  "Unique identifier and primary key of the `Token` entity"
  id: ID! # Set to `${tribute.id}-token-${token.id}`
  name: String
  symbol: String
  tokenAddress: Bytes!
  totalSupply: BigInt
  holders: [TokenHolder!] @derivedFrom(field: "token")
}

type TokenHolder @entity {
  id: ID! # Set to `${tribute.id}-tokenholder-${memberAddress.id}`
  createdAt: String
  # member: Member
  memberAddress: Bytes
  balance: BigInt
  totalUnits: BigInt!
  token: Token #`${tribute.id}-token-${token.id}`
  tokenHoldings: [Token!] @derivedFrom(field: "holders")
}
